# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DownloadBoku
                                 A QGIS plugin
 This plugin downloads data from the Boku server.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-06-09
        git sha              : $Format:%H$
        copyright            : (C) 2023 by TBD
        email                : TBD
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication,Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtWidgets import QMessageBox

from qgis.core import *
from qgis.utils import *

import requests
import os.path

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .download_boku_dialog import DownloadBokuDialog
# extra library for boku data management
from .bokurequest import *

# -- elementi della GUI --
# mMapLayerComboBox     -> combo polygon layer
# comboBox_4            -> combo feature del layer
# clientSecretLineEdit  -> text token
# comboBox_2            -> combo indicator
# pushButton            -> button get dates
# comboBox_3            -> combo select date
# pushButton_2          -> button download tif
# -- --

class DownloadBoku:
    """QGIS Plugin Implementation."""
    
    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'DownloadBoku_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&COALA Downloader')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('COALADownloader', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/download_boku/favicon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Download COALA products'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&COALA Downloader'),
                action)
            self.iface.removeToolBarIcon(action)
            
    def extract_geom(self,layer,featid):
        boku_info("extract_geom:in")
        srccrs = layer.crs()
        dstcrs = QgsCoordinateReferenceSystem("EPSG:3857")
        boku_info("srccrs " + str(srccrs) + " dstcrs " + str(dstcrs))
        transformContext = QgsProject.instance().transformContext()
        xform = QgsCoordinateTransform(srccrs, dstcrs, transformContext)
        req = QgsFeatureRequest(featid)
        for feat in layer.getFeatures(req):
          boku_info("feat/feat_id "+str(feat)+','+str(feat.id()))
          geom = feat.geometry()
          gres = geom.transform(xform)
          geomjson = geom.asJson()
          print("feat_geometry",gres,geom.wkbType(),QgsWkbTypes.displayString(geom.wkbType()))
          print("feat_geometry",len(geomjson),geomjson)
        boku_info("extract_geom:out")
        return geomjson

    def clear_dates(self):
        boku_info("clear_dates:in " + str(self.dlg.comboBox_3.count()))
        self.dlg.comboBox_3.clear()
        boku_info("clear_dates:out " + str(self.dlg.comboBox_3.count()))
            
    def get_dates(self):
#    QMessageBox.information(None, "DEBUG:", str(some_variable)) 
        boku_info("get_dates:in")
        # Get selected layer from comboBox
        layer = self.dlg.mMapLayerComboBox.currentLayer()
        if layer==None:
          QMessageBox.information(None, "Warning", "Select a polygon layer")
          return        
        print(layer)
        # Get selected polygon from comboBox
        feattxt = self.dlg.comboBox_4.currentText()
        featno = self.dlg.comboBox_4.currentIndex()
        featid = self.dlg.comboBox_4.currentData()
        boku_info("featid "+str(featid))
        if featid==None:
          QMessageBox.information(None, "Warning", "Select a polygon")
          return        
        geomjson = self.extract_geom(layer,featid)
        # Get selected indicator from comboBox
        indicator = str(self.dlg.comboBox_2.currentText())
        # Get token from LineEdit
        token = self.dlg.clientSecretLineEdit.text()
        if token=='':
          QMessageBox.information(None, "Warning", "Insert token")
          return        
        if token=='carla!':
          token = 'c749b213208b179046d877bd21e2d635241c4f03d40fb19712b72894e34877daec4f29c971e50652'
        print("get_dates:",layer,featid,featno,feattxt,token,indicator)
        QApplication.setOverrideCursor(Qt.WaitCursor)
        dates = boku_getdates(token,indicator,geomjson)
        QApplication.restoreOverrideCursor()
        print("get_dates:",boku_status_code,len(dates))
        if boku_status_code<0:
          QMessageBox.information(None, "Warning", "Error in date request")
        else:
          if len(dates)==0:
            QMessageBox.information(None, "Warning", "No date found")
        self.dlg.comboBox_3.clear()
        self.dlg.comboBox_3.addItems(dates)
        boku_info("get_dates:out " + str(self.dlg.comboBox_3.count()))

    def format_featname(self,feat):
      flabel = '( ID: '+str(feat.id())+' ) '
      idx = 0
      for f in feat:
        if idx<4:
          flabel = flabel + ','+str(f)
        idx=idx+1  
      print(feat.id(),'---',flabel)
      return flabel
    
    def select_feature(self):
      boku_info("select_feature:in")
      layer = self.dlg.mMapLayerComboBox.currentLayer()
      featid = self.dlg.comboBox_4.currentData()
      print("select feature id:",featid)
      layer.selectByExpression('$id='+ str(featid))
      boku_info("select_feature:out")
    
    def zoom_to_selected(self,featid):
      boku_info("zoom_to_selected:in")
      self.iface.mapCanvas().refresh() 
      p = QgsProject.instance()
      layer = self.dlg.mMapLayerComboBox.currentLayer()
      p.setCrs(layer.crs())
      featid = self.dlg.comboBox_4.currentData()
      req = QgsFeatureRequest(featid)
      for feat in layer.getFeatures(req):
          box = feat.geometry().boundingBox()
      self.iface.mapCanvas().setExtent(box)
      boku_info("zoom_to_selected:out")
    
    def deselect_layers(self):
      boku_info("deselect_layers:in")
      mc = self.iface.mapCanvas()
      for layer in mc.layers():
        if layer.type() == layer.VectorLayer:
          layer.removeSelection()
      mc.refresh()
      boku_info("deselect_layers:out")

    def update_features(self):
        boku_info("update_features:in")
        self.dlg.comboBox_4.clear()        
        selectedLayer = self.dlg.mMapLayerComboBox.currentLayer()
        if selectedLayer:
            print("update_features:",selectedLayer)
            for feat in selectedLayer.getFeatures():
              flabel = self.format_featname(feat)
              self.dlg.comboBox_4.addItem(flabel,feat.id())
        boku_info("update_features:out")

    def download_raster(self):
        boku_info("download_raster:in")
        # Get selected layer from comboBox
        layer = self.dlg.mMapLayerComboBox.currentLayer()
        if layer==None:
          QMessageBox.information(None, "Warning", "Select a polygon layer")
          return        
        # Get selected polygon from comboBox
        featid = self.dlg.comboBox_4.currentData()
        if featid==None:
          QMessageBox.information(None, "Warning", "Select a polygon")
          return        
        boku_info("featid "+str(featid))
        geomjson = self.extract_geom(layer,featid)
        # Get selected indicator from comboBox
        indicator = str(self.dlg.comboBox_2.currentText())
        # Get token from LineEdit
        token = self.dlg.clientSecretLineEdit.text()
        if token=='':
          QMessageBox.information(None, "Warning", "Insert token")        
          return
        if token=='carla!':
          token = 'c749b213208b179046d877bd21e2d635241c4f03d40fb19712b72894e34877daec4f29c971e50652'
        # Get selected indicator from comboBox
        date = str(self.dlg.comboBox_3.currentText())
        print("download_raster:",date,'-',None)
        if date==None or date=='':
          QMessageBox.information(None, "Warning", "Select a date")        
          return
        print("download_raster:",layer,featid,token,indicator,date)
        QApplication.setOverrideCursor(Qt.WaitCursor)
        retc = boku_download(token,indicator,geomjson,date)
        QApplication.restoreOverrideCursor()
        print("download_raster:retc",boku_status_code,retc)
        if boku_status_code<0:
          QMessageBox.information(None, "Warning", "Error in date request")
        else:
          if retc['errcode']==0:
            iface.addRasterLayer(retc['outfile'],retc['layname'])
        boku_info("download_raster:out")

    def on_getdate_click(self):
      boku_info("on_getdate_click")

    def on_download_click(self):
      boku_info("on_download_click")

    def on_layer_change(self):
      boku_info("on_layer_change")
      self.clear_dates()
      self.deselect_layers()
      self.select_feature()
    
    def on_feature_change(self):
      boku_info("on_feature_change")
      self.clear_dates()
      self.deselect_layers()
      self.select_feature()

    def on_indicator_change(self):
      boku_info("on_indicator_change")
      self.clear_dates()
      
    def on_date_change(self):
      boku_info("on_date_change")
    
    def run(self):
        """Run method that performs all the real work"""
        boku_info("run:in")
        boku_init()
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = DownloadBokuDialog()
            self.dlg.pushButton.clicked.connect(self.get_dates)
            self.dlg.pushButton_2.clicked.connect(self.download_raster)
            self.dlg.comboBox_2.currentTextChanged.connect(self.clear_dates)
            self.dlg.mMapLayerComboBox.layerChanged.connect(self.update_features)
            self.dlg.pushButton_3.clicked.connect(self.zoom_to_selected)               # button zoom
            self.dlg.pushButton.clicked.connect(self.on_getdate_click)                 # button get dates
            self.dlg.pushButton_2.clicked.connect(self.on_download_click)              # button download tif
            self.dlg.mMapLayerComboBox.layerChanged.connect(self.on_layer_change)      # combo layer
            self.dlg.comboBox_4.currentTextChanged.connect(self.on_feature_change)     # combo feature del layer
            self.dlg.comboBox_2.currentTextChanged.connect(self.on_indicator_change)   # combo indicator
            self.dlg.comboBox_3.currentTextChanged.connect(self.on_date_change)        # combo select date        
        # Populate the comboBox with all the polygon layers
        self.dlg.mMapLayerComboBox.setFilters(QgsMapLayerProxyModel.PolygonLayer)
        self.update_features
        # Indicators List
        indicators = ['ndvi', 'fcover', 'lai', 'ndmi','str','et','cwr']
        # Populate the comboBox with names of all the indicators
        self.dlg.comboBox_2.clear()
        self.dlg.comboBox_2.addItems(indicators)
        # show the dialog
        self.dlg.show()
        self.deselect_layers()
        # Run the dialog event loop
        result = self.dlg.exec_()
        self.deselect_layers()        
        # See if OK was pressed
        if result:
            print(result)
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
        boku_info("run:out")
                    